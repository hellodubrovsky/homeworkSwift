import UIKit

/*
 1. –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª ¬´Car¬ª –∏ –æ–ø–∏—Å–∞—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞, –æ–±—â–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π, –∞ —Ç–∞–∫–∂–µ –º–µ—Ç–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è.
 2. –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ ¬´Car¬ª –∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –Ω–∏—Ö –º–µ—Ç–æ–¥—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å
 –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º: –æ—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ, –∑–∞–ø—É—Å—Ç–∏—Ç—å/–∑–∞–≥–ª—É—à–∏—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—å –∏ —Ç.–¥. (–ø–æ –æ–¥–Ω–æ–º—É –º–µ—Ç–æ–¥—É
 –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ, —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å —Å–ª–µ–¥—É–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ –¥–µ–π—Å—Ç–≤–∏—è, —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –æ–±—â–∞—è –¥–ª—è –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π).
 3. –°–æ–∑–¥–∞—Ç—å –¥–≤–∞ –∫–ª–∞—Å—Å–∞, –∏–º–ø–ª–µ–º–µ–Ω—Ç–∏—Ä—É—é—â–∏—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª ¬´Car¬ª - trunkCar –∏ sport–°ar. –û–ø–∏—Å–∞—Ç—å –≤ –Ω–∏—Ö —Å–≤–æ–π—Å—Ç–≤–∞,
 –æ—Ç–ª–∏—á–∞—é—â–∏–µ—Å—è –¥–ª—è —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏ —Ü–∏—Å—Ç–µ—Ä–Ω—ã.
 4. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, –∏–º–ø–ª–µ–º–µ–Ω—Ç–∏—Ä—É—é—â–µ–µ –ø—Ä–æ—Ç–æ–∫–æ–ª CustomStringConvertible.
 5. –°–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫ –Ω–∏–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.
 6. –í—ã–≤–µ—Å—Ç–∏ —Å–∞–º–∏ –æ–±—ä–µ–∫—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª—å. */






// MARK: –ù–ï–û–ë–•–û–î–ò–ú–´–ï –ü–ï–†–ï–ß–ò–°–õ–ï–ù–ò–Ø

enum ChoiceOfDoorsAndWindows {
    case door, window
}

enum StatusDoorOrWindow: String {
    case open = "–æ—Ç–∫—Ä—ã—Ç—ã"
    case close = "–∑–∞–∫—Ä—ã—Ç—ã"
}

enum StatusEngine: String {
    case start = "–∑–∞–≤–µ–¥–µ–Ω"
    case stop = "–∑–∞–≥–ª—É—à–µ–Ω"
}

enum TypeEngine: String {
    case petrol = "–±–µ–Ω–∑–∏–Ω–æ–≤—ã–π"
    case diesel = "–¥–∏–∑–µ–ª—å–Ω—ã–π"
    case electrical = "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π"
    case gas = "–≥–∞–∑–æ–≤—ã–π"
}

enum TypeTransmission: String {
    case manual = "—Ä—É—á–Ω–∞—è"
    case auto = "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è"
}

extension UIColor {
    var name: String? {
        switch self {
        case UIColor.black: return "—á–µ—Ä–Ω—ã–π"
        case UIColor.darkGray: return "—Ç–µ–º–Ω–æ-—Å–µ—Ä—ã–π"
        case UIColor.lightGray: return "—Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π"
        case UIColor.white: return "–±–µ–ª—ã–π"
        case UIColor.gray: return "—Å–µ—Ä—ã–π"
        case UIColor.red: return "–∫—Ä–∞—Å–Ω—ã–π"
        case UIColor.green: return "–∑–µ–ª–µ–Ω—ã–π"
        case UIColor.blue: return "–≥–æ–ª—É–±–æ–π"
        case UIColor.yellow: return "–∂–µ–ª—Ç—ã–π"
        case UIColor.orange: return "–æ—Ä–∞–Ω–∂–µ–≤—ã–π"
        case UIColor.brown: return "—Å–µ—Ä—ã–π"
        case UIColor.red: return "–∫—Ä–∞—Å–Ω—ã–π"
        default: return nil
        }
    }
}






// MARK: –ü–†–û–¢–û–ö–û–õ –ê–í–¢–û–ú–û–ë–ò–õ–Ø

protocol CarProtocol: AnyObject {
    var brand: String {get}
    var model: String {get}
    var engine: TypeEngine {get}
    var transmission: TypeTransmission {get}
    
    var color: UIColor {get set}
    var radio: Bool {get set}
    var mileage: Double {get set}
    var statusDoor: StatusDoorOrWindow {get set}
    var statusWindow: StatusDoorOrWindow {get set}
    var statusEngine: StatusEngine {get set}
    
    func changeStatusEngine()
    func changeStatusDoorAndWindow(whatToChange: ChoiceOfDoorsAndWindows)
    func driveCertainDistance(distance: Double) -> Double
}






// MARK: –†–ê–°–®–ò–†–ï–ù–ò–ï –ü–†–û–¢–û–ö–û–õ–ê CAR

extension CarProtocol {
    
    // –ú–µ—Ç–æ–¥ –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –∑–∞–≤–µ—Å—Ç–∏ –∏–ª–∏ –∑–∞–≥–ª—É—à–∏—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—å.
    func changeStatusEngine() {
        self.statusEngine = self.statusEngine == .stop ? .start : .stop
        print(self.statusEngine == .stop ? "üöô –î–≤–∏–≥–∞—Ç–µ–ª—å \(self.brand) \(self.model) –∑–∞–≥–ª—É—à—ë–Ω.\n" : "üöô –î–≤–∏–≥–∞—Ç–µ–ª—å \(self.brand) \(self.model) –∑–∞–≤–µ–¥—ë–Ω.\n")
    }
    
    // –ú–µ—Ç–æ–¥ –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–≤–µ—Ä–µ–π –∏–ª–∏ –æ–∫–æ–Ω.
    func changeStatusDoorAndWindow(whatToChange: ChoiceOfDoorsAndWindows) {
        switch whatToChange {
        case .door:
            self.statusDoor = self.statusDoor == .open ? .close : .open
            print("üöô –°—Ç—É—Ç—É—Å –¥–≤–µ—Ä–µ–π –∏–∑–º–µ–Ω–∏–ª—Å—è, —Ç–µ–ø–µ—Ä—å –æ–Ω–∏: \(self.statusDoor.rawValue).\n")
        case .window:
            self.statusWindow = self.statusWindow == .open ? .close : .open
            print("üöô –°—Ç—É—Ç—É—Å –æ–∫–æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è, —Ç–µ–ø–µ—Ä—å –æ–Ω–∏: \(self.statusWindow.rawValue).\n")
        }
    }
    
    // –ú–µ—Ç–æ–¥ –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–≤–µ—Ä–µ–π –∏–ª–∏ –æ–∫–æ–Ω.
    func driveCertainDistance(distance: Double) -> Double {
        guard distance > 0 else {
            print("üëâ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ! –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –ø–æ–µ—Ö–∞–ª, —Ç.–∫. –æ–Ω –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–µ—Ö–∞—Ç—å –Ω—É–ª–µ–≤—É—é –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é.\n")
            return self.mileage
        }
        self.mileage += distance
        print("üöô –ê–≤—Ç–æ–º–æ–±–∏–ª—å –ø—Ä–æ–µ—Ö–∞–ª \(distance) –∫–º., –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ–±–µ–≥ —Å–æ—Å—Ç–æ–≤–ª—è–µ—Ç \(self.mileage) –∫–º.\n")
        return self.mileage
    }
}






// MARK: –ö–õ–ê–°–° –°–ü–û–†–¢–ò–í–ù–û–ì–û –ê–í–¢–û–ú–û–ë–ò–õ–Ø

class SportCar: CarProtocol {
    
    // –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–µ–≥–∫–æ–≤–æ–≥–æ –∞–≤—Ç–æ.
    enum TypeBodyCar: String {
        case sedan = "—Å–µ–¥–∞–Ω"
        case coupe = "–∫—É–ø–µ"
        case hatchback = "—Ö–µ—Ç—á–±—ç–∫"
        case crossover = "–∫—Ä–æ—Å—Å–æ–≤–µ—Ä"
        case sportCar = "—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π"
    }
    
    let brand: String
    let model: String
    let engine: TypeEngine
    let transmission: TypeTransmission
    var color: UIColor
    var radio: Bool
    var mileage: Double
    var statusDoor: StatusDoorOrWindow
    var statusWindow: StatusDoorOrWindow
    var statusEngine: StatusEngine
    
    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –ª–µ–≥–∫–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.
    let typeBody: TypeBodyCar
    let roofHatch: Bool
    private var tunning: Bool
    
    // C–≤-–≤–æ, –ø–æ–∑–≤–æ–ª—è—é—â–µ–µ —Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –∞–≤—Ç–æ-—Å–∞–ª–æ–Ω–µ.
    static var carCount: Int = 0
    
    // –î–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä, –≤ –Ω–µ–º –º—ã —Å—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª-–≤–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ —Å–∞–ª–æ–Ω–µ, –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏.
    deinit {
        print("üöô –õ–µ–≥–∫–æ–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å \(brand) \(model) –ø—Ä–æ–¥–∞–Ω. –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–µ \(SportCar.carCount - 1) –ª–µ–≥–∫–æ–≤—ã—Ö –º–∞—à–∏–Ω.\n")
        return SportCar.carCount -= 1
    }
    
    init(brand: String, model: String, engine: TypeEngine, transmission: TypeTransmission, color: UIColor, radio: Bool, mileage: Double, typeBody: TypeBodyCar, roofHatch: Bool, tunning: Bool, statusDoor: StatusDoorOrWindow, statusWindow: StatusDoorOrWindow, statusEngine: StatusEngine) {
        guard mileage >= 0 else { fatalError("üëâ –í–Ω–∏–º–∞–Ω–∏–µ! –û—à–∏–±–∫–∞! –ü—Ä–æ–±–µ–≥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0.") }
        self.brand = brand
        self.model = model
        self.engine = engine
        self.transmission = transmission
        self.color = color
        self.radio = radio
        self.mileage = mileage
        self.typeBody = typeBody
        self.roofHatch = roofHatch
        self.tunning = tunning
        self.statusDoor = statusDoor
        self.statusWindow = statusWindow
        self.statusEngine = statusEngine
        
        // –†–∞—Å—Å—á–µ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.
        SportCar.carCount += 1
        print("üöô –õ–µ–≥–∫–æ–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å \(brand) \(model) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω. –¢–µ–ø–µ—Ä—å –≤ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–µ \(SportCar.carCount) –ª–µ–≥–∫–æ–≤—ã—Ö –º–∞—à–∏–Ω.\n")
    }
    
    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ª–µ–≥–∫–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    func changeTunning() {
        self.tunning = self.tunning ? false : true
        print(self.tunning ? "üöô –ù–∞ –º–∞—à–∏–Ω—É \(self.brand) \(self.model) –¥–æ–±–∞–≤–ª–µ–Ω —Ç—é–Ω–∏–Ω–≥.\n" : "üöô –° –º–∞—à–∏–Ω—ã \(self.brand) \(self.model) —É–±—Ä–∞–Ω —Ç—é–Ω–∏–Ω–≥.\n")
    }
}
