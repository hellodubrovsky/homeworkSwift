import UIKit

// MARK: –î–û–ú–ê–®–ù–ï–ï –ó–ê–î–ê–ù–ò–ï
/*  1. –û–ø–∏—Å–∞—Ç—å –∫–ª–∞—Å—Å Car c –æ–±—â–∏–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏ –ø—É—Å—Ç—ã–º
       –º–µ—Ç–æ–¥–æ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å –ø—Ä–æ—à–ª—ã–º –∑–∞–¥–∞–Ω–∏–µ–º.
    2. –û–ø–∏—Å–∞—Ç—å –ø–∞—Ä—É –µ–≥–æ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–æ–≤ trunkCar –∏ sport–°ar. –ü–æ–¥—É–º–∞—Ç—å,
       –∫–∞–∫–∏–º–∏ –æ—Ç–ª–∏—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ –æ–±–ª–∞–¥–∞—é—Ç —ç—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏. –û–ø–∏—Å–∞—Ç—å
       –≤ –∫–∞–∂–¥–æ–º –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –Ω–µ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞.
    3. –í–∑—è—Ç—å –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ —É—Ä–æ–∫–∞ enum —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –Ω–∞–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º. –ü–æ–¥—É–º–∞—Ç—å,
       –∫–∞–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–º–µ–µ—Ç trunkCar, –∞ –∫–∞–∫–∏–µ ‚Äì sportCar. –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è –≤ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ.
    4. –í –∫–∞–∂–¥–æ–º –ø–æ–¥–∫–ª–∞—Å—Å–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Ç–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –µ–≥–æ –∫–ª–∞—Å—Å–æ–º.
    5. –°–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫ –Ω–∏–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.
    6. –í—ã–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å. */


// MARK: –ù–ï–û–ë–•–û–î–ò–ú–´–ï –ü–ï–†–ï–ß–ò–°–õ–ï–ù–ò–Ø
enum ChoiceOfDoorsAndWindows {
    case door, window
}

enum StatusDoorOrWindow: String {
    case open = "–æ—Ç–∫—Ä—ã—Ç—ã"
    case close = "–∑–∞–∫—Ä—ã—Ç—ã"
}

enum StatusEngine: String {
    case start = "–∑–∞–≤–µ–¥–µ–Ω"
    case stop = "–∑–∞–≥–ª—É—à–µ–Ω"
}

enum TypeEngine: String {
    case petrol = "–±–µ–Ω–∑–∏–Ω–æ–≤—ã–π"
    case diesel = "–¥–∏–∑–µ–ª—å–Ω—ã–π"
    case electrical = "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π"
    case gas = "–≥–∞–∑–æ–≤—ã–π"
}

enum TypeTransmission: String {
    case manual = "—Ä—É—á–Ω–∞—è"
    case auto = "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è"
}

extension UIColor {
    var name: String? {
        switch self {
        case UIColor.black: return "—á–µ—Ä–Ω—ã–π"
        case UIColor.darkGray: return "—Ç–µ–º–Ω–æ-—Å–µ—Ä—ã–π"
        case UIColor.lightGray: return "—Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π"
        case UIColor.white: return "–±–µ–ª—ã–π"
        case UIColor.gray: return "—Å–µ—Ä—ã–π"
        case UIColor.red: return "–∫—Ä–∞—Å–Ω—ã–π"
        case UIColor.green: return "–∑–µ–ª–µ–Ω—ã–π"
        case UIColor.blue: return "–≥–æ–ª—É–±–æ–π"
        case UIColor.yellow: return "–∂–µ–ª—Ç—ã–π"
        case UIColor.orange: return "–æ—Ä–∞–Ω–∂–µ–≤—ã–π"
        case UIColor.brown: return "—Å–µ—Ä—ã–π"
        case UIColor.red: return "–∫—Ä–∞—Å–Ω—ã–π"
        default: return nil
        }
    }
}



// MARK: –†–û–î–ò–¢–ï–õ–¨–°–ö–ò–ô –ö–õ–ê–°–° "CAR"
class Car {
    let brand: String
    let model: String
    let engine: TypeEngine
    let transmission: TypeTransmission
    
    var color: UIColor
    var radio: Bool
    var mileage: Double
    var statusDoor: StatusDoorOrWindow
    var statusWindow: StatusDoorOrWindow
    var statusEngine: StatusEngine
    
    init(brand: String, model: String, engine: TypeEngine, transmission: TypeTransmission, color: UIColor, radio: Bool, mileage: Double, statusDoor: StatusDoorOrWindow, statusWindow: StatusDoorOrWindow, statusEngine: StatusEngine) {
        guard mileage >= 0 else { fatalError("–í–Ω–∏–º–∞–Ω–∏–µ! –û—à–∏–±–∫–∞! –ü—Ä–æ–±–µ–≥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0.") }
        self.brand = brand
        self.model = model
        self.engine = engine
        self.transmission = transmission
        self.color = color
        self.radio = radio
        self.mileage = mileage
        self.statusDoor = statusDoor
        self.statusWindow = statusWindow
        self.statusEngine = statusEngine
    }
    
    // –ü—É—Å—Ç—ã–µ –º–µ—Ç–æ–¥—ã, –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è, –¥–≤–µ—Ä–µ–π –∏ –æ–∫–æ–Ω.
    func changeStatusEngine() {}
    func changeStatusDoorAndWindow(whatToChange: ChoiceOfDoorsAndWindows) {}
    
    // –ú–µ—Ç–æ–¥, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –ø—Ä–æ–µ—Ö–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ.
    func driveCertainDistance(distance: Double) -> Double {
        guard distance > 0 else {
            print("üëâ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ! –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –ø–æ–µ—Ö–∞–ª, —Ç.–∫. –æ–Ω –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–µ—Ö–∞—Ç—å –Ω—É–ª–µ–≤—É—é –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é.")
            return self.mileage
        }
        self.mileage += distance
        print("üöô –ê–≤—Ç–æ–º–æ–±–∏–ª—å –ø—Ä–æ–µ—Ö–∞–ª \(distance) –∫–º., –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ–±–µ–≥ —Å–æ—Å—Ç–æ–≤–ª—è–µ—Ç \(self.mileage) –∫–º.")
        return self.mileage
    }
}


